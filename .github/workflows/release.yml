name: Bank - Release NuGet Package to UPT-FAING-EPIS Org Feed

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_NAME: Bank.Domain 
  PROJECT_PATH: Bank/Bank.Domain/Bank.Domain.csproj
  TEST_PROJECT_PATH: Bank/Bank.Domain.Tests/Bank.Domain.Tests.csproj
  PACKAGE_OUTPUT_DIRECTORY: out
  # El propietario del repositorio (y del feed de paquetes de la organización)
  ORGANIZATION_NAME: ${{ github.repository_owner }} 

on:
  push:
    branches:
      - main  
  workflow_dispatch: 

jobs:
  build-test-publish-release:
    name: Build, Test, Publish Bank Package to UPT-FAING-EPIS Org Feed
    runs-on: ubuntu-latest
    permissions:
      # Permisos ESENCIALES para que GITHUB_TOKEN pueda funcionar
      contents: write  # Para la acción de release (crear tags, releases)
      packages: write # Para publicar paquetes en GitHub Packages

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }} && dotnet restore ${{ env.TEST_PROJECT_PATH }}

    - name: Run Unit Tests
      run: dotnet test ${{ env.TEST_PROJECT_PATH }} --no-restore --logger trx

    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore

    - name: Get Package Version from .csproj
      id: package_info
      run: |
        VERSION=$(grep -oP '(?<=<Version>).*(?=</Version>)' ${{ env.PROJECT_PATH }} | head -n 1)
        if [ -z "$VERSION" ]; then
          echo "Error: No se pudo extraer la versión del archivo ${{ env.PROJECT_PATH }}"
          exit 1
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version_tag=v$VERSION" >> $GITHUB_ENV 
        echo "Versión del paquete leída del .csproj: $VERSION"

    - name: Create NuGet Package
      run: |
        echo "Empaquetando ${{ env.PROJECT_NAME }} con versión: ${{ env.PACKAGE_VERSION }}"
        dotnet pack ${{ env.PROJECT_PATH }} \
          -c Release \
          --no-build \
          -o ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
          
    - name: Setup NuGet Source for Organization GitHub Packages
      run: |
        # URL del feed de la organización, usando github.repository_owner
        ORG_NUGET_URL="https://nuget.pkg.github.com/${{ env.ORGANIZATION_NAME }}/index.json"
        echo "Configurando NuGet source para el feed de la organización: $ORG_NUGET_URL"
        
        # Autenticación usando GITHUB_TOKEN (el token automático de Actions)
        # USERNAME es github.actor (el usuario/entidad que ejecuta el workflow)
        dotnet nuget add source "$ORG_NUGET_URL" \
          --name "github-org-feed" \
          --username "${{ github.actor }}" \
          --password "${{ secrets.GITHUB_TOKEN }}" \ # Usando el token automático
          --store-password-in-clear-text
          
    - name: Publish NuGet Package to Organization GitHub Packages
      run: |
        echo "Intentando publicar el paquete en el feed de la organización ${{ env.ORGANIZATION_NAME }}..."
        dotnet nuget push "${{ env.PACKAGE_OUTPUT_DIRECTORY }}/${{ env.PROJECT_NAME }}.${{ env.PACKAGE_VERSION }}.nupkg" \
          --api-key "${{ secrets.GITHUB_TOKEN }}" \ # Usando el token automático
          --source "github-org-feed" \
          --skip-duplicate

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ env.version_tag }} 
        name: "Release ${{ env.version_tag }} (${{ env.PROJECT_NAME }})"
        body: |
          Release del paquete ${{ env.PROJECT_NAME }} versión ${{ env.PACKAGE_VERSION }}.
          El código fuente está en ${{ github.server_url }}/${{ github.repository }}.
          El paquete NuGet ha sido publicado en el feed de la organización ${{ env.ORGANIZATION_NAME }}.
          Contiene el archivo NuGet generado.
        artifacts: "${{ env.PACKAGE_OUTPUT_DIRECTORY }}/${{ env.PROJECT_NAME }}.${{ env.PACKAGE_VERSION }}.nupkg"
        token: "${{ secrets.GITHUB_TOKEN }}" # Usando el token automático (necesita contents: write)
        allowUpdates: true